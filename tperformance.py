#####Measuring Performance with openCV#####

##import cv2
##
##img1 = cv2.imread('C:/Users/jash/Desktop/yo.jpg')
##e1 = cv2.getTickCount()
##for i in xrange(5,49,2):
##    img1 = cv2.medianBlur(img1,i)
##e2 = cv2.getTickCount()
##t = (e2 - e1)/cv2.getTickFrequency()
##print t


########Tracking object#######

##
##import cv2
##import numpy as np
##
##cap = cv2.VideoCapture(0)
##
##while(1):
##
##    # Take each frame
##    _, frame = cap.read()
##
##    # Convert BGR to HSV
##    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
##
##    # define range of blue color in HSV
##    lower_blue = np.array([110,50,50])
##    upper_blue = np.array([130,255,255])
##
##    # Threshold the HSV image to get only blue colors
##    mask = cv2.inRange(hsv, lower_blue, upper_blue)
##
##    # Bitwise-AND mask and original image
##    res = cv2.bitwise_and(frame,frame, mask= mask)
##
##    cv2.imshow('frame',frame)
##    cv2.imshow('mask',mask)
##    cv2.imshow('res',res)
##    k = cv2.waitKey(5) & 0xFF
##    if k == 27:
##        break
##
##cv2.destroyAllWindows()

#######Image Thresholding#######

##import cv2
##import numpy as np
##from matplotlib import pyplot as plt
##
##img = cv2.imread('C:/Users/jash/Desktop/yo.jpg',0)
##ret,thresh1 = cv2.threshold(img,127,255,cv2.THRESH_BINARY)
##ret,thresh2 = cv2.threshold(img,127,255,cv2.THRESH_BINARY_INV)
##ret,thresh3 = cv2.threshold(img,127,255,cv2.THRESH_TRUNC)
##ret,thresh4 = cv2.threshold(img,127,255,cv2.THRESH_TOZERO)
##ret,thresh5 = cv2.threshold(img,127,255,cv2.THRESH_TOZERO_INV)
##
##titles = ['Original Image','BINARY','BINARY_INV','TRUNC','TOZERO','TOZERO_INV']
##images = [img, thresh1, thresh2, thresh3, thresh4, thresh5]
##
##for i in xrange(6):
##    plt.subplot(2,3,i+1),plt.imshow(images[i],'gray')
##    plt.title(titles[i])
##    plt.xticks([]),plt.yticks([])
##
##plt.show()

######## adaptive thresholding####

#########Transformation########

##import cv2
##import numpy as np
##
##img = cv2.imread('C:/Users/jash/Desktop/yo.jpg')
##cv2.imshow("image",img)
##res = cv2.resize(img,None,fx=2, fy=2, interpolation = cv2.INTER_CUBIC)
##
##cv2.imshow("image1", res)
###OR
##
##height, width = img.shape[:2]
##res = cv2.resize(img,(2*width, 2*height), interpolation = cv2.INTER_CUBIC)
##
##cv2.imshow("image2",res)
##cv2.waitKey(0)

#########Translation#######

##import cv2
##import numpy as np
##
##img = cv2.imread('C:/Users/jash/Desktop/yo.jpg',0)
##rows,cols = img.shape
##
##M = np.float32([[1,0,100],[0,1,50]])
##dst = cv2.warpAffine(img,M,(cols,rows))
##
##cv2.imshow('img',dst)
##cv2.waitKey(0)
##cv2.destroyAllWindows()

######### smoothing images #####

##import cv2
##import numpy as np
##from matplotlib import pyplot as plt
##
##img = cv2.imread('C:/Users/jash/Desktop/yo.jpg')
##
##kernel = np.ones((5,5),np.float32)/25
##dst = cv2.filter2D(img,-1,kernel)
##
##plt.subplot(121),plt.imshow(img),plt.title('Original')
##plt.xticks([]), plt.yticks([])
##plt.subplot(122),plt.imshow(dst),plt.title('Averaging')
##plt.xticks([]), plt.yticks([])
##plt.show()

######## image averaging #########

##import cv2
##import numpy as np
##from matplotlib import pyplot as plt
##
##img = cv2.imread('C:/Users/jash/Desktop/yo.jpg')
##
##blur = cv2.blur(img,(5,5))
##
##plt.subplot(121),plt.imshow(img),plt.title('Original')
##plt.xticks([]), plt.yticks([])
##plt.subplot(122),plt.imshow(blur),plt.title('Blurred')
##plt.xticks([]), plt.yticks([])
##plt.show()

######### Morphological Transformations ##########
########### Read it over internet #######

######### Image Gradients ########
##
##import cv2
##import numpy as np
##from matplotlib import pyplot as plt
##
##img = cv2.imread('C:/Users/jash/Desktop/yo.jpg',0)
##
##laplacian = cv2.Laplacian(img,cv2.CV_64F)
##sobelx = cv2.Sobel(img,cv2.CV_64F,1,0,ksize=5)
##sobely = cv2.Sobel(img,cv2.CV_64F,0,1,ksize=5)
##
##plt.subplot(2,2,1),plt.imshow(img,cmap = 'gray')
##plt.title('Original'), plt.xticks([]), plt.yticks([])
##plt.subplot(2,2,2),plt.imshow(laplacian,cmap = 'gray')
##plt.title('Laplacian'), plt.xticks([]), plt.yticks([])
##plt.subplot(2,2,3),plt.imshow(sobelx,cmap = 'gray')
##plt.title('Sobel X'), plt.xticks([]), plt.yticks([])
##plt.subplot(2,2,4),plt.imshow(sobely,cmap = 'gray')
##plt.title('Sobel Y'), plt.xticks([]), plt.yticks([])
##
##plt.show()

############# canny edge detection ############

##import numpy as np
##import cv2
##
##im = cv2.imread('C:/Users/jash/Desktop/yo.jpg')
##imgray = cv2.cvtColor(im,cv2.COLOR_BGR2GRAY)
##ret,thresh = cv2.threshold(imgray,127,255,0)
##image, contours, hierarchy = cv2.findContours(thresh,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)
##img = cv2.drawContours(image, contours, -1, (0,255,0), 3)

import cv2
import numpy as np

img = cv2.imread('C:/Users/jash/Desktop/star.jpg')
imgray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
ret,thresh = cv2.threshold(imgray,127,255,0)
image, contours, hierarchy = cv2.findContours(thresh,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)
cv2.imshow("image1",image)
cnt = contours[0]
epsilon = 0.1*cv2.arcLength(cnt,True)
approx = cv2.approxPolyDP(cnt,epsilon,True)
print approx

rect = cv2.minAreaRect(cnt)
box = cv2.boxPoints(rect)
box = np.int0(box)
im = cv2.drawContours(img,[box],0,(0,0,255),2)

cv2.imshow("theda rect", im)
x,y,w,h = cv2.boundingRect(cnt)
img1 = cv2.rectangle(image,(x,y),(x+w,y+h),(0,255,0),2)
cv2.imshow("boundingrect", img1)
hull = cv2.convexHull(cnt)
print hull
area = cv2.contourArea(cnt)
print area

k = cv2.isContourConvex(cnt)
print k

perimeter = cv2.arcLength(cnt, True)
print perimeter



M = cv2.moments(cnt)
img = cv2.drawContours(image, hull, 1, (0,255,0), 3)

x,y,w,h = cv2.boundingRect(cnt)
img2 = cv2.rectangle(img,(x,y),(x+w,y+h),(0,255,0),2)
cv2.imshow("img2",img2)

cv2.imshow("image",img)
cv2.waitKey(0)
cv2.destroyAllWindows()
print M
